name: Binary builds

on:
  push:
    tags:
      - v*

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
        matrix:
          config:
          - { os: windows-latest, 
              ninja-url: "https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-win.zip",
              cmake-url: "https://github.com/Kitware/CMake/releases/download/v3.16.1/cmake-3.16.1-win64-x64.zip",
              cmake-dir: "cmake-3.16.1-win64-x64\bin"
            }
          - { os: ubuntu-latest, 
              ninja-url: "https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-linux.zip",
              cmake-url: "https://github.com/Kitware/CMake/releases/download/v3.16.1/cmake-3.16.1-Linux-x86_64.tar.gz",
              cmake-dir: "cmake-3.16.1-Linux-x86_64/bin"
            }
          - { os: macos-latest, 
              ninja-url: "https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-mac.zip",
              cmake-url: "https://github.com/Kitware/CMake/releases/download/v3.16.1/cmake-3.16.1-Darwin-x86_64.tar.gz",
              cmake-dir: "cmake-3.16.1-Darwin-x86_64/CMake.app/Contents/bin"
            }

    steps:
    - uses: actions/checkout@v1

    - name: Download Ninja
      run: |
        curl -L ${{ matrix.config.ninja-url }} --output ninja.zip
        cmake -E tar xvf ninja.zip
        
    - name: Download CMake
      run: |
        curl -L ${{ matrix.config.cmake-url }} --output cmake.zip
        cmake -E tar xvf cmake.zip


    - name: Configure (Linux)
      if: runner.os == 'Linux'
      run: |
        export CC=gcc
        export CXX=g++
        export PATH=${{ matrix.config.cmake-dir }}:`pwd`:$PATH
        chmod +x ninja
        chmod +x ${{ matrix.config.cmake-dir }}/cmake
        cmake \
          -S llvm -B build \
          -D CMAKE_BUILD_TYPE=Release \
          -D LLVM_ENABLE_RTTI=ON \
          -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
          -G Ninja
    - name: Configure (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        set CC=cl
        set CXX=cl
        set PATH=${{ matrix.config.cmake-dir }};%cd%;%PATH%
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cmake ^
          -S llvm -B build ^
          -D CMAKE_BUILD_TYPE=Release ^
          -D LLVM_ENABLE_RTTI=ON ^
          -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra" ^
          -G Ninja
    - name: Configure (macOS)
      if: runner.os == 'macOS'
      run: |
        export CC=clang
        export CXX=clang++
        export PATH=${{ matrix.config.cmake-dir }}:`pwd`:$PATH
        chmod +x ninja
        chmod +x ${{ matrix.config.cmake-dir }}/cmake
        cmake \
          -S llvm -B build \
          -D CMAKE_BUILD_TYPE=Release \
          -D LLVM_ENABLE_RTTI=ON \
          -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra" \
          -G Ninja


    - name: Build (Windows)
      env:
        NINJA_STATUS: "[%f/%t %o/sec] "
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        set PATH=${{ matrix.config.cmake-dir }};%PATH%
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cmake --build build
    - name: Build (Linux / macOS)
      env:
        NINJA_STATUS: "[%f/%t %o/sec] "
      if: runner.os != 'Windows'
      run: |
        export PATH=${{ matrix.config.cmake-dir }}:$PATH
        cmake --build build


    - name: Install (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        set PATH=${{ matrix.config.cmake-dir }};%PATH%
        cmake --install build --prefix instdir
    - name: Install (Linux / macOS)
      if: runner.os != 'Windows'
      run: |
        export PATH=${{ matrix.config.cmake-dir }}:$PATH
        cmake --install build --prefix instdir


    - name: Pack
      working-directory: instdir
      run: cmake -E tar cJfv ../${{ runner.OS }}.tar.xz .

    - uses: actions/upload-artifact@v1
      with:
        path: ./${{ runner.OS }}.tar.xz
        name: ${{ runner.OS }}.tar.xz
        
  release:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Download Linux artifact
      uses: actions/download-artifact@v1
      with:
        name: Linux.tar.xz
        path: ubuntu-latest
    - name: Download MacOS artifact
      uses: actions/download-artifact@v1
      with:
        name: macOS.tar.xz
        path: macos-latest
    - name: Download Windows artifact
      uses: actions/download-artifact@v1
      with:
        name: Windows.tar.xz
        path: windows-latest
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    
    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ubuntu-latest/Linux.tar.xz
        asset_name: Linux.tar.xz
        asset_content_type: application/x-gtar
    - name: Upload MacOS Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos-latest/macOS.tar.xz
        asset_name: macOS.tar.xz
        asset_content_type: application/x-gtar
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows-latest/Windows.tar.xz
        asset_name: Windows.tar.xz
        asset_content_type: application/x-gtar
